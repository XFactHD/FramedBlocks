plugins {
    id 'java-library'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle.userdev' version '7.0.105'
}

version = mod_version
group = 'xfacthd.framedblocks'

base {
    archivesName = 'FramedBlocks'
}

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(21)

minecraft.accessTransformers.file project.file('src/main/resources/META-INF/accesstransformer.cfg')

runs {
    configureEach {
        // systemProperty  'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
        systemProperty  'forge.logging.console.level', 'debug'
        systemProperty  'forge.enabledGameTestNamespaces', 'framedblocks'

        modSources.addAll project.sourceSets.main, project.sourceSets.test
    }

    client {
        workingDirectory project.file('run')

        //systemProperty 'framedblocks.test.enable_double_block_part_hit_debug_renderer', 'true'
        //systemProperty 'framedblocks.test.enable_connection_debug_renderer', 'true'
        //systemProperty 'framedblocks.test.enable_state_merger_debug_logging', 'true'
        //systemProperty 'framedblocks.test.state_merger_debug_filter', '.*'
    }

    server {
        workingDirectory project.file('run_server')

        programArgument '--nogui'
    }

    data {
        workingDirectory project.file('run')

        programArguments.addAll(
                '--mod', 'framedblocks',
                '--all',
                '--output', file('src/generated/resources/').getAbsolutePath(),
                '--existing', file('src/main/resources/').getAbsolutePath(),
                '--existing-mod', 'ae2'
        )
    }

    gameTestServer {
        workingDirectory project.file('run_gametest')
    }
}

sourceSets {
    main.resources {
        srcDir 'src/generated/resources'
    }

    test {
        java {
            srcDir "src/test/java"
        }
        resources {
            srcDir "src/test/resources"
        }
    }
}

repositories {
    maven {
        name = 'CurseMaven'
        url = 'https://www.cursemaven.com'
        content {
            includeGroup('curse.maven')
        }
    }
    maven {
        name = "tterrag's maven"
        url = 'https://maven.tterrag.com/'
        content {
            includeGroup('team.chisel.ctm')
            includeGroup('com.tterrag.registrate')
            includeGroup('com.jozufozu.flywheel')
            includeGroup('com.simibubi.create')
        }
    }
    maven {
        name = "Jared's maven"
        url = 'https://maven.blamejared.com/'
        content {
            includeGroup('org.embeddedt')
            includeGroup('mezz.jei')
        }
    }
    maven {
        name = 'TerraformersMC maven'
        url = "https://maven.terraformersmc.com/"
        content {
            includeGroup('dev.emi')
        }
    }
    maven {
        name = "Shedaniel's maven"
        url = 'https://maven.shedaniel.me/'
        content {
            includeGroup('dev.architectury')
            includeGroup('me.shedaniel')
            includeGroup('me.shedaniel.cloth')
        }
    }
    maven {
        name = 'ResourcefulBees maven'
        url = 'https://maven.resourcefulbees.com/repository/maven-public/'
        content {
            includeGroup('com.teamresourceful.resourcefullib')
            includeGroup('earth.terrarium.athena')
        }
    }
    maven {
        name = 'Modmaven'
        url = 'https://modmaven.dev/'
        content {
            includeGroup('appeng')
        }
    }
    maven {
        name = "Fuzs Mod Resources"
        url = "https://raw.githubusercontent.com/Fuzss/modresources/main/maven/"
        content {
            includeGroupByRegex('fuzs.*')
        }
    }
    mavenLocal() {
        content {
            includeGroupByRegex('xfacthd.*')
        }
    }
}

dependencies {
    implementation("net.neoforged:neoforge:${neoforge_version}")

    //compileOnly("team.chisel.ctm:CTM:${ctm_version}")

    // Only needed when DiagonalBlocks is switched to implementation
    //runtimeOnly("curse.maven:puzzleslib-495476:5233008")
    //runtimeOnly("curse.maven:forgecfgapi-547434:5051716")
    compileOnly("fuzs.diagonalblocks:diagonalblocks-neoforge:${diag_blocks_version}")

    //compileOnly("curse.maven:buildinggadgets-298187:3829297")

    //runtimeOnly("xfacthd.contex:ConnectedTextures:${contex_version}")

    compileOnly("earth.terrarium.athena:athena-neoforge-${athena_mc_version}:${athena_version}")
    //runtimeOnly("com.teamresourceful.resourcefullib:resourcefullib-neoforge-${resful_lib_mc_version}:${resful_lib_version}")
    //runtimeOnly("earth.terrarium.chipped:chipped-neoforge-${chipped_mc_version}:${chipped_version}")

    //compileOnly("curse.maven:xycraft_core-653786:4788862")
    //compileOnly("curse.maven:xycraft_world-653789:4788863")

    compileOnly("mezz.jei:jei-${jei_mc_version}-common-api:${jei_version}")
    compileOnly("mezz.jei:jei-${jei_mc_version}-neoforge-api:${jei_version}")
    //runtimeOnly("mezz.jei:jei-${jei_mc_version}-neoforge:${jei_version}")

    // Switch Arch, Cloth and REI-neoforge to impl for runtime testing
    compileOnly("dev.architectury:architectury-neoforge:${arch_version}")
    compileOnly("me.shedaniel.cloth:cloth-config-neoforge:${cloth_version}")
    compileOnly("me.shedaniel:RoughlyEnoughItems-neoforge:${rei_version}")
    //runtimeOnly("curse.maven:reipc-521393:4723408")
    compileOnly("me.shedaniel:RoughlyEnoughItems-api-neoforge:${rei_version}")
    compileOnly("me.shedaniel:RoughlyEnoughItems-default-plugin-neoforge:${rei_version}")
    compileOnly("me.shedaniel:REIPluginCompatibilities-forge-annotations:${reipcanno_version}")

    compileOnly("dev.emi:emi-neoforge:${emi_version}+${emi_mc_version}:api")
    runtimeOnly("dev.emi:emi-neoforge:${emi_version}+${emi_mc_version}")

    compileOnly("curse.maven:modernfix-790626:5077296")
    //runtimeOnly("org.embeddedt:embeddium-${embeddium_mc_version}:${embeddium_version}")
    //runtimeOnly("curse.maven:oculus-581495:4578741")
    //runtimeOnly("curse.maven:starlight-neoforge-951766:4967623")

    //compileOnly("com.simibubi.create:create-${create_mc_version}:${create_version}:slim") { transitive = false }
    //compileOnly("com.jozufozu.flywheel:flywheel-forge-${flywheel_mc_version}:${flywheel_version}")
    // Only needed when Create and/or Flywheel are switched to implementation
    //runtimeOnly("com.tterrag.registrate:Registrate:${registrate_version}")

    //compileOnly("curse.maven:moonlight-499980:4621773")
    //compileOnly("curse.maven:supplementaries-412082:4622527")

    //compileOnly("curse.maven:nocubes-309664:3944569")

    //implementation("curse.maven:guidebook-253874:4593765")

    //runtimeOnly("curse.maven:corelib-454372:4976551")
    //runtimeOnly("curse.maven:fusion-854949:5005142")
    //runtimeOnly("curse.maven:conglass-383129:5002616")

    compileOnly("appeng:appliedenergistics2-neoforge:${ae2_version}:api")
    //runtimeOnly("appeng:appliedenergistics2-neoforge:${ae2_version}")

    compileOnly("curse.maven:jade-324717:5109393")

    implementation("curse.maven:atlasviewer-633577:5024183")
}

tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            minecraft_version: minecraft_version,
            minecraft_version_range: minecraft_version_range,
            neoforge_version: neoforge_version,
            neoforge_version_range: neoforge_version_range,
            loader_version_range: loader_version_range,
            mod_version: mod_version,
            jei_version: jei_version,
            rei_version: rei_version,
            emi_version: emi_version,
            diag_blocks_version: diag_blocks_version,
            ctm_version: ctm_version,
            buildinggadgets_version: buildinggadgets_version,
            nocubes_version: nocubes_version,
            atlasviewer_version: atlasviewer_version,
            modernfix_version: modernfix_version,
            supplementaries_version: supplementaries_version,
            athena_version: athena_version,
            contex_version: contex_version,
            create_version: create_version,
            ae2_version: ae2_version
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

processTestResources {
    duplicatesStrategy(DuplicatesStrategy.INCLUDE)
}

publishing {
    publications {
        register ('mavenJava', MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
